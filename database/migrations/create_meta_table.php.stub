<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;
use Illuminate\Support\Str;

return new class extends Migration
{
    protected $tableName;
    
    protected $customTables;

    public function __construct()
    {
        $this->tableName = config('metable.tables.default', 'meta');
        $this->customTables = config('metable.tables.custom', []);
    }

    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        $this->defaultTableSchema();

        $this->customTablesSchemas();
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        $this->dropDefaultTable();

        $this->dropCustomTables();
    }
    
    public function createTableSchema($tableName = null)
    {
        $parent = null;
        if( is_array( $tableName ) ) {
            $parent    = $tableName[0];
            $tableName = $tableName[1];
        } else {
            $tableName = $tableName ?: $this->tableName;
        }

        Schema::create($tableName, function (Blueprint $table) use($parent, $tableName) {
            $table->id();

            $table->string('type')->default('null');

            $table->string('key')->index();
            $table->longText('value')->nullable();

            if( $parent ) {
                $key = Str::singular($parent) . '_id';
                $table->bigInteger($key)->unsigned();
                $table->foreign($key)->references('id')->on($parent)->onDelete('cascade');
            } else {
                $table->bigInteger('metable_id')->unsigned()->index();
                $table->string('metable_type')->index();
            }

            $table->timestamps();
        });
    }

    public function defaultTableSchema()
    {
        $this->createTableSchema($this->tableName);
    }
    
    public function customTablesSchemas()
    {
        foreach ($this->customTables as $tableName => $tableMeta) {
            $this->createTableSchema([$tableName, $tableMeta]);
        }
    }

    public function dropDefaultTable()
    {
        Schema::dropIfExists($this->tableName);
    }


    public function dropCustomTables()
    {
        foreach ($this->customTables as $tableName) {
            Schema::dropIfExists($tableName);
        }
    }

};